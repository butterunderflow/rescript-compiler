// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ImportHooks from "./ImportHooks.bs.js";
import * as ImportHookDefault from "./ImportHookDefault.bs.js";

function Hooks(props) {
  var match = React.useState(function () {
        return 0;
      });
  var setCount = match[1];
  var count = match[0];
  return React.createElement("div", undefined, React.createElement("p", undefined, "Hooks example " + (props.vehicle.name + (" clicked " + (String(count) + " times")))), React.createElement("button", {
                  onClick: (function (param) {
                      Curry._1(setCount, (function (param) {
                              return count + 1 | 0;
                            }));
                    })
                }, "Click me"), React.createElement(ImportHooks.make, {
                  person: {
                    name: "Mary",
                    age: 71
                  },
                  children: null,
                  renderMe: (function (x) {
                      return x.randomString;
                    })
                }, "child1", "child2"), React.createElement(ImportHookDefault.make, {
                  person: {
                    name: "DefaultImport",
                    age: 42
                  },
                  children: null,
                  renderMe: (function (x) {
                      return x.randomString;
                    })
                }, "child1", "child2"));
}

function Hooks$Another$anotherComponent(props) {
  Curry._1(props.callback, undefined);
  return React.createElement("div", undefined, "Another Hook " + props.vehicle.name);
}

var Another = {
  anotherComponent: Hooks$Another$anotherComponent
};

function Hooks$Inner(props) {
  return React.createElement("div", undefined, "Another Hook " + props.vehicle.name);
}

function Hooks$Inner$Another$anotherComponent(props) {
  return React.createElement("div", undefined, "Another Hook " + props.vehicle.name);
}

var Another$1 = {
  anotherComponent: Hooks$Inner$Another$anotherComponent
};

function Hooks$Inner$Inner2(props) {
  return React.createElement("div", undefined, "Another Hook " + props.vehicle.name);
}

function Hooks$Inner$Inner2$Another$anotherComponent(props) {
  return React.createElement("div", undefined, "Another Hook " + props.vehicle.name);
}

var Another$2 = {
  anotherComponent: Hooks$Inner$Inner2$Another$anotherComponent
};

var Inner2 = {
  make: Hooks$Inner$Inner2,
  Another: Another$2
};

var Inner = {
  make: Hooks$Inner,
  Another: Another$1,
  Inner2: Inner2
};

function Hooks$NoProps(props) {
  return React.createElement("div", undefined, null);
}

var NoProps = {
  make: Hooks$NoProps
};

function functionWithRenamedArgs(_to, _Type, cb) {
  Curry._1(cb, _to);
  return _to.name + _Type.name;
}

function Hooks$WithRename$componentWithRenamedArgs(props) {
  var _to = props._to;
  Curry._1(props.cb, _to);
  return _to.name + props._Type.name;
}

var WithRename = {
  componentWithRenamedArgs: Hooks$WithRename$componentWithRenamedArgs
};

function makeWithRef(param) {
  var vehicle = param.vehicle;
  return function (ref) {
    if (ref == null) {
      return null;
    } else {
      return React.createElement("button", {
                  ref: ref
                }, vehicle.name);
    }
  };
}

var Hooks$WithRef$makeWithRef = makeWithRef;

var WithRef = {
  makeWithRef: Hooks$WithRef$makeWithRef
};

var testForwardRef = React.forwardRef(function (param, param$1) {
      return makeWithRef(param)(param$1);
    });

var input = React.forwardRef(function (props, ref) {
      return React.createElement("div", {
                  ref: ref
                }, props.r.x);
    });

var ForwardRef = {
  input: input
};

function Hooks$Poly$polymorphicComponent(props) {
  return props.p[0].name;
}

var Poly = {
  polymorphicComponent: Hooks$Poly$polymorphicComponent
};

function Hooks$Fun$functionReturningReactElement(props) {
  return props.name;
}

var Fun = {
  functionReturningReactElement: Hooks$Fun$functionReturningReactElement
};

function Hooks$RenderPropRequiresConversion(props) {
  return Curry._1(props.renderVehicle, {
              vehicle: {
                name: "Car"
              },
              number: 42
            });
}

var RenderPropRequiresConversion = {
  make: Hooks$RenderPropRequiresConversion
};

function Hooks$WithChildren$aComponentWithChildren(props) {
  return React.createElement("div", undefined, "Another Hook " + props.vehicle.name, React.createElement("div", undefined, props.children));
}

var WithChildren = {
  aComponentWithChildren: Hooks$WithChildren$aComponentWithChildren
};

function Hooks$DD(props) {
  return props.name;
}

var DD = {
  make: Hooks$DD
};

var make = Hooks;

var $$default = Hooks;

export {
  make ,
  $$default ,
  $$default as default,
  Another ,
  Inner ,
  NoProps ,
  functionWithRenamedArgs ,
  WithRename ,
  WithRef ,
  testForwardRef ,
  ForwardRef ,
  Poly ,
  Fun ,
  RenderPropRequiresConversion ,
  WithChildren ,
  DD ,
}
/* testForwardRef Not a pure module */
